generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  phone           String?
  active          Boolean        @default(false)
  subscription_id String? @unique
  customer_id     String? @unique
  subscribed      Boolean        @default(false)
  linked_user_id  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  login_count     Decimal?       @default(0) @db.Decimal(6, 0)
  canceled_at     Decimal?       @db.Decimal(15, 0)
  ended_at        Decimal?       @db.Decimal(15, 0)
  start_date      Decimal?       @db.Decimal(15, 0)
  status          String?
  trial_end       Decimal?       @db.Decimal(15, 0)
  plaid           Plaid[]
  Rules           Rules[]
  sessions        Session[]
  transactions    Transactions[]

  @@map("users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens")
}

model Plaid {
  id             String     @id @default(cuid())
  access_token   String     @unique
  item_id        String?    @unique @map("item_id")
  user_id        String?    @map("user_id")
  active         Boolean?   @default(true)
  cursor         String?
  institution    String?
  institution_id String?
  error_code     String?
  accounts       Accounts[]
  user           User?      @relation(fields: [user_id], references: [id])

  @@map("plaid")
}

model Accounts {
  id            String         @id @default(cuid())
  account_id    String?        @unique
  name          String?
  official_name String?
  subtype       String?
  type          String?
  user_id       String?        @map("user_id")
  item_id       String?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  active        Boolean?       @default(true)
  amount        Decimal?       @db.Decimal(9, 2)
  details       Json?
  institution   String?
  plaid         Plaid?         @relation(fields: [item_id], references: [item_id])
  transactions  Transactions[]

  @@map("accounts")
}

model Transactions {
  id                String    @id @default(cuid())
  account_id        String?
  name              String?
  merchant_name     String?
  transaction_id    String?   @unique
  detailed_category String?
  location          Json?
  primary_category  String?
  user_id           String?   @map("user_id")
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt
  item_id           String?
  date              String?
  amount            Decimal?  @db.Decimal(9, 2)
  active            Boolean?  @default(true)
  category          Json?
  authorized_date   DateTime?
  month_year        String?
  week_year         String?
  recurring         Boolean   @default(false)
  unified           String?   @default("1f4b8")
  notes             String?
  alert_date        DateTime?
  currency          String?
  account           Accounts? @relation(fields: [account_id], references: [id])
  user              User?     @relation(fields: [user_id], references: [id])

  @@map("transactions")
}

model LinkTokens {
  id          String    @id @default(cuid())
  user_id     String?   @map("user_id")
  access_code String?   @unique
  expires     DateTime?
  from_email  String?
  to_email    String?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt

  @@map("link_tokens")
}

model Rules {
  id         String  @id @default(cuid())
  identifier String
  ruleset    Json?
  user_id    String? @map("user_id")
  user       User?   @relation(fields: [user_id], references: [id])

  @@map("rules")
}
