generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  phone           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  active          Boolean        @default(false)
  linked_user_id  String?
  subscription_id String?        @unique
  product_id      String?
  customer_id     String?        @unique
  login_count     Decimal?       @default(0) @db.Decimal(6, 0)
  status          String?
  canceled_at     Decimal?       @db.Decimal(15, 0)
  ended_at        Decimal?       @db.Decimal(15, 0)
  start_date      Decimal?       @db.Decimal(15, 0)
  trial_end       Decimal?       @db.Decimal(15, 0)
  referral_id     String?        @unique @default(cuid())
  plaid           Plaid[]
  Preferences     Preferences[]
  Rules           Rules[]
  sessions        Session[]
  transactions    Transactions[]
  accounts        Accounts[]
  NetWorth        NetWorth[]
  Answers         Answers[]
  Referrals       Referrals[]
  Balances        Balances[]
  Recurring       Recurring[]
  email_weekly    Boolean        @default(true)
  email_monthly   Boolean        @default(true)
  email_alert     Boolean        @default(true)
  Goals           Goals[]

  @@map("users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens")
}

model Plaid {
  id             String     @id @default(cuid())
  access_token   String     @unique
  item_id        String?    @unique @map("item_id")
  user_id        String?    @map("user_id")
  active         Boolean?   @default(true)
  cursor         String?
  institution    String?
  institution_id String?
  error_code     String?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now()) @updatedAt
  accounts       Accounts[]
  user           User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("plaid")
}

model Accounts {
  id            String         @id @default(cuid())
  account_id    String?        @unique
  name          String?
  official_name String?
  subtype       String?
  type          String?
  user_id       String?        @map("user_id")
  item_id       String?
  active        Boolean?       @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  amount        Decimal?       @db.Decimal(9, 2)
  details       Json?
  institution   String?
  plaid         Plaid?         @relation(fields: [item_id], references: [item_id], onDelete: Cascade)
  user          User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions  Transactions[]
  Recurring     Recurring[]

  @@map("accounts")
}

model Transactions {
  id                String    @id @default(cuid())
  account_id        String?
  account_name      String?
  name              String?
  custom_name       String?
  merchant_name     String?
  transaction_id    String?   @unique
  detailed_category String?
  counterparties    Json?
  primary_category  String?
  user_id           String?   @map("user_id")
  item_id           String?
  date              String?
  amount            Decimal?  @db.Decimal(9, 2)
  active            Boolean?  @default(true)
  category          Json?
  tags              Json?
  authorized_date   DateTime?
  month_year        String?
  week_year         String?
  year              String?
  recurring         Boolean   @default(false)
  pending           Boolean   @default(false)
  unified           String?   @default("1f4b8")
  notes             String?
  alert_date        DateTime?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt
  currency          String?
  account           Accounts? @relation(fields: [account_id], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model LinkTokens {
  id          String    @id @default(cuid())
  user_id     String?   @map("user_id")
  access_code String?   @unique
  expires     DateTime?
  from_email  String?
  to_email    String?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt

  @@map("link_tokens")
}

model Rules {
  id         String  @id @default(cuid())
  identifier String
  ruleset    Json?
  user_id    String? @map("user_id")
  user       User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("rules")
}

model Preferences {
  id           String  @id @default(cuid())
  vision_board Json?
  user_id      String? @unique @map("user_id")
  user         User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model NetWorth {
  id         String    @id @default(cuid())
  snapshot   Json
  stats      Json
  accounts   Json
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  date       String?
  user_id    String?   @map("user_id")
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("net_worth")
}

model Questions {
  id       Int       @id @default(autoincrement())
  question String
  answer   Boolean
  detail   String?
  Answers  Answers[]

  @@map("questions")
}

model Answers {
  id          String     @id @default(cuid())
  correct     Boolean
  created_at  DateTime?  @default(now())
  user_id     String?    @map("user_id")
  question_id Int?       @map("question_id")
  user        User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  question    Questions? @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Referrals {
  id                   String    @id @default(cuid())
  amount               Decimal?  @db.Decimal(9, 2)
  customer_id          String
  referred_customer_id String    @unique
  referred_email       String    @unique
  created_at           DateTime? @default(now())
  user_id              String?   @map("user_id")
  user                 User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model Balances {
  id          String    @id @default(cuid())
  amount      Decimal?  @db.Decimal(9, 2)
  details     String?
  customer_id String
  balance_id  String?   @unique
  type        String
  created_at  DateTime? @default(now())
  user_id     String?   @map("user_id")
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("balances")
}

model Recurring {
  id                String    @id @default(cuid())
  average_amount    Decimal?  @db.Decimal(9, 2)
  last_amount       Decimal?  @db.Decimal(9, 2)
  account_id        String
  stream_id         String    @unique
  name              String?
  custom_name       String?
  merchant_name     String?
  primary_category  String
  detailed_category String
  first_date        String
  last_date         String
  upcoming_date     String?
  frequency         String
  transaction_ids   Json
  is_active         Boolean
  active            Boolean   @default(true)
  status            String
  type              String?
  unified           String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt
  user_id           String?   @map("user_id")
  user              User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account           Accounts? @relation(fields: [account_id], references: [account_id], onDelete: Cascade)

  @@map("recurring")
}

model Emails {
  id               String    @id @default(cuid())
  email            String?   @unique
  name             String?
  source           String?
  created_at       DateTime? @default(now())

  @@map("emails")
}

model Goals {
  id             String    @id @default(cuid())
  name           String?
  amount         Decimal?  @db.Decimal(9, 2)
  current_amount Decimal?  @db.Decimal(9, 2)
  image          String?
  date           String?
  updated_at     DateTime? @updatedAt
  created_at     DateTime? @default(now())
  user_id        String?   @map("user_id")
  user           User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Webhooks {
  id             String    @id @default(cuid())
  webhook_code   String?
  item_id        String?
  created_at     DateTime? @default(now())

  @@map("webhooks")
}

model CustomerFeedback {
  id              String    @id @default(cuid())
  question        String?
  email           String?
  answers         Json?
  created_at      DateTime? @default(now())

  @@map("customer_feedback")
}
